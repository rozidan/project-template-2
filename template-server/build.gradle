buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply from: '../gradle/docker.gradle'

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/groups/public" }
}

dependencies {
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.kafka:spring-kafka')

    compile('com.github.rozidan:levelog-spring-boot:1.0.0-SNAPSHOT') { changing = true }
    compile('com.github.rozidan:modelmapper-spring-boot-starter:1.0.1-SNAPSHOT') { changing = true }
    compile('com.github.rozidan:logger-spring-boot:1.0.0-SNAPSHOT') { changing = true }

    compile('io.springfox:springfox-swagger2:2.9.2')
    compile('org.flywaydb:flyway-core')

    compile project(':template-client')
    compileOnly('org.projectlombok:lombok')

    runtime('com.h2database:h2')
    runtime('org.mariadb.jdbc:mariadb-java-client')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
    resolutionStrategy {
        failOnVersionConflict()
        // cache dynamic versions for 10 minutes
        cacheDynamicVersionsFor 10*60, 'seconds'
        // don't cache changing modules at all
        cacheChangingModulesFor 0, 'seconds'
    }
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

bootJar {
    excludeDevtools = !rootProject.devtools
    manifest {
        attributes("Implementation-Title": rootProject.name,
                "Implementation-Version": version)
    }
    from("${rootProject.projectDir}") {
        include "LICENSE"
        into "META-INF"
    }
}

